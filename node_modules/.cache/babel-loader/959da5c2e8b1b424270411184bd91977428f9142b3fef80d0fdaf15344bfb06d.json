{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HoneycombPlot = ({\n  easyCount,\n  mediumCount,\n  hardCount,\n  radius = 20,\n  width = 800,\n  height = 600\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [...Array(easyCount).fill('easy'), ...Array(mediumCount).fill('medium'), ...Array(hardCount).fill('hard')];\n\n      // Shuffle the questionTypes array to randomize hexagon colors\n      d3.shuffle(questionTypes);\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3'\n      };\n      const hSpacing = 1.5 * radius; // Horizontal spacing\n      const vSpacing = Math.sqrt(3) * radius; // Vertical spacing\n\n      // Directions for hexagon adjacency\n      const directions = [[1, 0],\n      // Right\n      [0, 1],\n      // Down\n      [-1, 1],\n      // Up-Right\n      [-1, 0],\n      // Left\n      [0, -1],\n      // Up\n      [1, -1] // Down-Right\n      ];\n      const hexagonPoints = [];\n      const visited = new Set();\n      const queue = [[0, 0]]; // Start from the origin\n      visited.add('0,0');\n      while (questionTypes.length && queue.length) {\n        const [x, y] = queue.shift();\n        const questionType = questionTypes.pop();\n        const color = colorMap[questionType];\n        const hexCenterX = x * hSpacing;\n        const hexCenterY = y * vSpacing + x % 2 * (vSpacing / 2);\n        hexagonPoints.push([hexCenterX, hexCenterY, color]);\n\n        // Check adjacent positions\n        directions.forEach(([dx, dy]) => {\n          const newX = x + dx;\n          const newY = y + dy;\n          const newKey = `${newX},${newY}`;\n          if (!visited.has(newKey)) {\n            visited.add(newKey);\n            queue.push([newX, newY]);\n          }\n        });\n      }\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n      const hexbinGenerator = hexbin().radius(radius).x(d => d[0]).y(d => d[1]);\n\n      // Draw hexagons\n      hexagonPoints.forEach(([x, y, color]) => {\n        svg.append('path').attr('d', hexbinGenerator.hexagon()).attr('transform', `translate(${x}, ${y})`).attr('fill', color).attr('stroke', '#000').attr('stroke-width', '1px');\n      });\n\n      // Set the viewBox to fit the content\n      const minX = d3.min(hexagonPoints, d => d[0]);\n      const maxX = d3.max(hexagonPoints, d => d[0]);\n      const minY = d3.min(hexagonPoints, d => d[1]);\n      const maxY = d3.max(hexagonPoints, d => d[1]);\n      svg.attr('viewBox', `${minX - radius} ${minY - radius} ${maxX - minX + 2 * radius} ${maxY - minY + 2 * radius}`);\n    };\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, radius, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Honeycomb Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(HoneycombPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = HoneycombPlot;\nexport default HoneycombPlot;\nvar _c;\n$RefreshReg$(_c, \"HoneycombPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","hexbin","jsxDEV","_jsxDEV","HoneycombPlot","easyCount","mediumCount","hardCount","radius","width","height","_s","svgRef","createHoneycombPlot","totalCount","questionTypes","Array","fill","shuffle","colorMap","easy","medium","hard","hSpacing","vSpacing","Math","sqrt","directions","hexagonPoints","visited","Set","queue","add","length","x","y","shift","questionType","pop","color","hexCenterX","hexCenterY","push","forEach","dx","dy","newX","newY","newKey","has","select","current","selectAll","remove","svg","attr","hexbinGenerator","d","append","hexagon","minX","min","maxX","max","minY","maxY","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';\n\nconst HoneycombPlot = ({ easyCount, mediumCount, hardCount, radius = 20, width = 800, height = 600 }) => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [\n        ...Array(easyCount).fill('easy'),\n        ...Array(mediumCount).fill('medium'),\n        ...Array(hardCount).fill('hard'),\n      ];\n\n      // Shuffle the questionTypes array to randomize hexagon colors\n      d3.shuffle(questionTypes);\n\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3',\n      };\n\n      const hSpacing = 1.5 * radius; // Horizontal spacing\n      const vSpacing = Math.sqrt(3) * radius; // Vertical spacing\n\n      // Directions for hexagon adjacency\n      const directions = [\n        [1, 0],    // Right\n        [0, 1],    // Down\n        [-1, 1],   // Up-Right\n        [-1, 0],   // Left\n        [0, -1],   // Up\n        [1, -1]    // Down-Right\n      ];\n\n      const hexagonPoints = [];\n      const visited = new Set();\n      const queue = [[0, 0]]; // Start from the origin\n      visited.add('0,0');\n\n      while (questionTypes.length && queue.length) {\n        const [x, y] = queue.shift();\n        const questionType = questionTypes.pop();\n        const color = colorMap[questionType];\n\n        const hexCenterX = x * hSpacing;\n        const hexCenterY = y * vSpacing + (x % 2) * (vSpacing / 2);\n\n        hexagonPoints.push([hexCenterX, hexCenterY, color]);\n\n        // Check adjacent positions\n        directions.forEach(([dx, dy]) => {\n          const newX = x + dx;\n          const newY = y + dy;\n          const newKey = `${newX},${newY}`;\n\n          if (!visited.has(newKey)) {\n            visited.add(newKey);\n            queue.push([newX, newY]);\n          }\n        });\n      }\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n\n      const svg = d3\n        .select(svgRef.current)\n        .attr('width', width)\n        .attr('height', height);\n\n      const hexbinGenerator = hexbin()\n        .radius(radius)\n        .x(d => d[0])\n        .y(d => d[1]);\n\n      // Draw hexagons\n      hexagonPoints.forEach(([x, y, color]) => {\n        svg\n          .append('path')\n          .attr('d', hexbinGenerator.hexagon())\n          .attr('transform', `translate(${x}, ${y})`)\n          .attr('fill', color)\n          .attr('stroke', '#000')\n          .attr('stroke-width', '1px');\n      });\n\n      // Set the viewBox to fit the content\n      const minX = d3.min(hexagonPoints, d => d[0]);\n      const maxX = d3.max(hexagonPoints, d => d[0]);\n      const minY = d3.min(hexagonPoints, d => d[1]);\n      const maxY = d3.max(hexagonPoints, d => d[1]);\n\n      svg.attr('viewBox', `${minX - radius} ${minY - radius} ${maxX - minX + 2 * radius} ${maxY - minY + 2 * radius}`);\n    };\n\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, radius, width, height]);\n\n  return (\n    <div>\n      <h1>Honeycomb Plot</h1>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default HoneycombPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}