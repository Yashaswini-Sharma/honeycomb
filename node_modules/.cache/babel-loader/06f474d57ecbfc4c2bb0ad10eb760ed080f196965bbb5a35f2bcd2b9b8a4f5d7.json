{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycomb.jsx\";\nimport React from 'react';\nimport { HexGrid, Layout, Hexagon, Text } from 'react-hexgrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Honeycomb = ({\n  percentages\n}) => {\n  const totalHexagons = 100; // You can adjust this based on your needs\n\n  // Calculate the number of hexagons for each percentage\n  const hexagonCounts = percentages.map(percentage => Math.round(percentage / 100 * totalHexagons));\n\n  // Create hexagons data\n  const hexagonsData = [];\n  let colorIndex = 0;\n  hexagonCounts.forEach((count, index) => {\n    for (let i = 0; i < count; i++) {\n      hexagonsData.push({\n        id: `${colorIndex}-${i}`,\n        percentage: percentages[index],\n        colorIndex\n      });\n    }\n    colorIndex++;\n  });\n\n  // Color array for different percentages\n  const colors = [\"#FFDDC1\", \"#FFABAB\", \"#FFC3A0\", \"#FF677D\", \"#D4A5A5\", \"#392F5A\", \"#31A2AC\", \"#61C0BF\"];\n  return /*#__PURE__*/_jsxDEV(HexGrid, {\n    width: 800,\n    height: 600,\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      size: {\n        x: 10,\n        y: 10\n      },\n      flat: true,\n      spacing: 1.1,\n      children: hexagonsData.map(hex => /*#__PURE__*/_jsxDEV(Hexagon, {\n        q: hex.colorIndex,\n        r: hex.colorIndex,\n        s: 0,\n        fill: `#${colors[hex.colorIndex % colors.length].slice(1)}`,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: `${hex.percentage}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)\n      }, hex.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = Honeycomb;\nexport default Honeycomb;\nvar _c;\n$RefreshReg$(_c, \"Honeycomb\");","map":{"version":3,"names":["React","HexGrid","Layout","Hexagon","Text","jsxDEV","_jsxDEV","Honeycomb","percentages","totalHexagons","hexagonCounts","map","percentage","Math","round","hexagonsData","colorIndex","forEach","count","index","i","push","id","colors","width","height","children","size","x","y","flat","spacing","hex","q","r","s","fill","length","slice","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycomb.jsx"],"sourcesContent":["import React from 'react';\nimport { HexGrid, Layout, Hexagon, Text } from 'react-hexgrid';\n\nconst Honeycomb = ({ percentages }) => {\n  const totalHexagons = 100; // You can adjust this based on your needs\n\n  // Calculate the number of hexagons for each percentage\n  const hexagonCounts = percentages.map(percentage => Math.round((percentage / 100) * totalHexagons));\n\n  // Create hexagons data\n  const hexagonsData = [];\n  let colorIndex = 0;\n  hexagonCounts.forEach((count, index) => {\n    for (let i = 0; i < count; i++) {\n      hexagonsData.push({ id: `${colorIndex}-${i}`, percentage: percentages[index], colorIndex });\n    }\n    colorIndex++;\n  });\n\n  // Color array for different percentages\n  const colors = [\"#FFDDC1\", \"#FFABAB\", \"#FFC3A0\", \"#FF677D\", \"#D4A5A5\", \"#392F5A\", \"#31A2AC\", \"#61C0BF\"];\n\n  return (\n    <HexGrid width={800} height={600}>\n      <Layout size={{ x: 10, y: 10 }} flat={true} spacing={1.1}>\n        {hexagonsData.map(hex => (\n          <Hexagon key={hex.id} q={hex.colorIndex} r={hex.colorIndex} s={0} fill={`#${colors[hex.colorIndex % colors.length].slice(1)}`}>\n            <Text>{`${hex.percentage}%`}</Text>\n          </Hexagon>\n        ))}\n      </Layout>\n    </HexGrid>\n  );\n};\n\nexport default Honeycomb;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,MAAM,EAAEC,OAAO,EAAEC,IAAI,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EACrC,MAAMC,aAAa,GAAG,GAAG,CAAC,CAAC;;EAE3B;EACA,MAAMC,aAAa,GAAGF,WAAW,CAACG,GAAG,CAACC,UAAU,IAAIC,IAAI,CAACC,KAAK,CAAEF,UAAU,GAAG,GAAG,GAAIH,aAAa,CAAC,CAAC;;EAEnG;EACA,MAAMM,YAAY,GAAG,EAAE;EACvB,IAAIC,UAAU,GAAG,CAAC;EAClBN,aAAa,CAACO,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;IACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;MAC9BL,YAAY,CAACM,IAAI,CAAC;QAAEC,EAAE,EAAE,GAAGN,UAAU,IAAII,CAAC,EAAE;QAAER,UAAU,EAAEJ,WAAW,CAACW,KAAK,CAAC;QAAEH;MAAW,CAAC,CAAC;IAC7F;IACAA,UAAU,EAAE;EACd,CAAC,CAAC;;EAEF;EACA,MAAMO,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;EAEvG,oBACEjB,OAAA,CAACL,OAAO;IAACuB,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE,GAAI;IAAAC,QAAA,eAC/BpB,OAAA,CAACJ,MAAM;MAACyB,IAAI,EAAE;QAAEC,CAAC,EAAE,EAAE;QAAEC,CAAC,EAAE;MAAG,CAAE;MAACC,IAAI,EAAE,IAAK;MAACC,OAAO,EAAE,GAAI;MAAAL,QAAA,EACtDX,YAAY,CAACJ,GAAG,CAACqB,GAAG,iBACnB1B,OAAA,CAACH,OAAO;QAAc8B,CAAC,EAAED,GAAG,CAAChB,UAAW;QAACkB,CAAC,EAAEF,GAAG,CAAChB,UAAW;QAACmB,CAAC,EAAE,CAAE;QAACC,IAAI,EAAE,IAAIb,MAAM,CAACS,GAAG,CAAChB,UAAU,GAAGO,MAAM,CAACc,MAAM,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,EAAG;QAAAZ,QAAA,eAC5HpB,OAAA,CAACF,IAAI;UAAAsB,QAAA,EAAE,GAAGM,GAAG,CAACpB,UAAU;QAAG;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC,GADvBV,GAAG,CAACV,EAAE;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEX,CACV;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEd,CAAC;AAACC,EAAA,GA9BIpC,SAAS;AAgCf,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}