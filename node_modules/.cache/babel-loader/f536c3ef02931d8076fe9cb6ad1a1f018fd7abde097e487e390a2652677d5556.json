{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HoneycombPlot = ({\n  easyCount,\n  mediumCount,\n  hardCount,\n  width = 800,\n  height = 600\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [...Array(easyCount).fill('easy'), ...Array(mediumCount).fill('medium'), ...Array(hardCount).fill('hard')];\n      d3.shuffle(questionTypes);\n      const radius = 20; // Radius of each hexagon\n      const hexWidth = Math.sqrt(3) * radius;\n      const hexHeight = 2 * radius;\n\n      // Calculate the number of hexagons that can fit in width and height\n      const cols = Math.floor(width / (hexWidth * 0.75));\n      const rows = Math.floor(height / hexHeight);\n\n      // Hexagon placement\n      const hexagonPoints = [];\n      const visited = new Set();\n      const directions = [[1, 0],\n      // Right\n      [0, 1],\n      // Down\n      [-1, 1],\n      // Up-Right\n      [-1, 0],\n      // Left\n      [0, -1],\n      // Up\n      [1, -1] // Down-Right\n      ];\n      let startX = Math.random() * width;\n      let startY = Math.random() * height;\n      hexagonPoints.push([startX, startY]);\n      visited.add(`${Math.round(startX)},${Math.round(startY)}`);\n      while (hexagonPoints.length < totalCount) {\n        const [x, y] = hexagonPoints[hexagonPoints.length - 1];\n        const randomDirection = directions[Math.floor(Math.random() * directions.length)];\n        const newX = x + randomDirection[0] * hexWidth * 0.75;\n        const newY = y + randomDirection[1] * hexHeight * 0.75;\n\n        // Ensure new hexagon is within bounds and not overlapping\n        if (newX >= 0 && newX <= width - hexWidth && newY >= 0 && newY <= height - hexHeight && !visited.has(`${Math.round(newX)},${Math.round(newY)}`)) {\n          hexagonPoints.push([newX, newY]);\n          visited.add(`${Math.round(newX)},${Math.round(newY)}`);\n        }\n      }\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n      const hexbinGenerator = hexbin().radius(radius).x(d => d[0]).y(d => d[1]);\n\n      // Draw hexagons\n      hexagonPoints.forEach((pos, i) => {\n        const color = {\n          easy: '#F9A500',\n          medium: '#CD8DFF',\n          hard: '#13A4E3'\n        }[questionTypes[i % questionTypes.length]];\n        svg.append('path').attr('d', hexbinGenerator.hexagon()).attr('transform', `translate(${pos[0] + radius}, ${pos[1] + radius})`).attr('fill', color).attr('stroke', '#000').attr('stroke-width', '1px');\n      });\n    };\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Honeycomb Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(HoneycombPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = HoneycombPlot;\nexport default HoneycombPlot;\nvar _c;\n$RefreshReg$(_c, \"HoneycombPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","hexbin","jsxDEV","_jsxDEV","HoneycombPlot","easyCount","mediumCount","hardCount","width","height","_s","svgRef","createHoneycombPlot","totalCount","questionTypes","Array","fill","shuffle","radius","hexWidth","Math","sqrt","hexHeight","cols","floor","rows","hexagonPoints","visited","Set","directions","startX","random","startY","push","add","round","length","x","y","randomDirection","newX","newY","has","select","current","selectAll","remove","svg","attr","hexbinGenerator","d","forEach","pos","i","color","easy","medium","hard","append","hexagon","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';\n\nconst HoneycombPlot = ({ easyCount, mediumCount, hardCount, width = 800, height = 600 }) => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [\n        ...Array(easyCount).fill('easy'),\n        ...Array(mediumCount).fill('medium'),\n        ...Array(hardCount).fill('hard'),\n      ];\n\n      d3.shuffle(questionTypes);\n\n      const radius = 20; // Radius of each hexagon\n      const hexWidth = Math.sqrt(3) * radius;\n      const hexHeight = 2 * radius;\n\n      // Calculate the number of hexagons that can fit in width and height\n      const cols = Math.floor(width / (hexWidth * 0.75));\n      const rows = Math.floor(height / hexHeight);\n\n      // Hexagon placement\n      const hexagonPoints = [];\n      const visited = new Set();\n      const directions = [\n        [1, 0],    // Right\n        [0, 1],    // Down\n        [-1, 1],   // Up-Right\n        [-1, 0],   // Left\n        [0, -1],   // Up\n        [1, -1]    // Down-Right\n      ];\n\n      let startX = Math.random() * width;\n      let startY = Math.random() * height;\n      hexagonPoints.push([startX, startY]);\n      visited.add(`${Math.round(startX)},${Math.round(startY)}`);\n\n      while (hexagonPoints.length < totalCount) {\n        const [x, y] = hexagonPoints[hexagonPoints.length - 1];\n        const randomDirection = directions[Math.floor(Math.random() * directions.length)];\n        const newX = x + randomDirection[0] * hexWidth * 0.75;\n        const newY = y + randomDirection[1] * hexHeight * 0.75;\n\n        // Ensure new hexagon is within bounds and not overlapping\n        if (\n          newX >= 0 && newX <= width - hexWidth &&\n          newY >= 0 && newY <= height - hexHeight &&\n          !visited.has(`${Math.round(newX)},${Math.round(newY)}`)\n        ) {\n          hexagonPoints.push([newX, newY]);\n          visited.add(`${Math.round(newX)},${Math.round(newY)}`);\n        }\n      }\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n\n      const svg = d3\n        .select(svgRef.current)\n        .attr('width', width)\n        .attr('height', height);\n\n      const hexbinGenerator = hexbin()\n        .radius(radius)\n        .x(d => d[0])\n        .y(d => d[1]);\n\n      // Draw hexagons\n      hexagonPoints.forEach((pos, i) => {\n        const color = {\n          easy: '#F9A500',\n          medium: '#CD8DFF',\n          hard: '#13A4E3',\n        }[questionTypes[i % questionTypes.length]];\n\n        svg\n          .append('path')\n          .attr('d', hexbinGenerator.hexagon())\n          .attr('transform', `translate(${pos[0] + radius}, ${pos[1] + radius})`)\n          .attr('fill', color)\n          .attr('stroke', '#000')\n          .attr('stroke-width', '1px');\n      });\n    };\n\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n\n  return (\n    <div>\n      <h1>Honeycomb Plot</h1>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default HoneycombPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}