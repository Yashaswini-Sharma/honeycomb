{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycomb.jsx\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HoneycombPlotGenerator = ({\n  easy_count,\n  medium_count,\n  hard_count\n}) => {\n  const generatePlot = async () => {\n    try {\n      const response = await axios.post('/generate_plot', {\n        easy_count,\n        medium_count,\n        hard_count\n      }, {\n        responseType: 'blob' // Important for handling binary data\n      });\n      const url = URL.createObjectURL(new Blob([response.data], {\n        type: 'image/png'\n      }));\n      setPlotUrl(url);\n    } catch (error) {\n      console.error('Error generating plot:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: plotUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: plotUrl,\n      alt: \"Honeycomb Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = HoneycombPlotGenerator;\nexport default HoneycombPlotGenerator;\nvar _c;\n$RefreshReg$(_c, \"HoneycombPlotGenerator\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","HoneycombPlotGenerator","easy_count","medium_count","hard_count","generatePlot","response","post","responseType","url","URL","createObjectURL","Blob","data","type","setPlotUrl","error","console","children","plotUrl","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycomb.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst HoneycombPlotGenerator = ({easy_count, medium_count, hard_count}) => {\n  \n  const generatePlot = async () => {\n    try {\n      const response = await axios.post('/generate_plot', { easy_count, medium_count, hard_count }, {\n        responseType: 'blob',  // Important for handling binary data\n      });\n\n      const url = URL.createObjectURL(new Blob([response.data], { type: 'image/png' }));\n      setPlotUrl(url);\n    } catch (error) {\n      console.error('Error generating plot:', error);\n    }\n  };\n\n  return (\n    <div >\n      {plotUrl && <img src={plotUrl} alt=\"Honeycomb Plot\" />}\n    </div>\n  );\n};\n\nexport default HoneycombPlotGenerator;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,sBAAsB,GAAGA,CAAC;EAACC,UAAU;EAAEC,YAAY;EAAEC;AAAU,CAAC,KAAK;EAEzE,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,gBAAgB,EAAE;QAAEL,UAAU;QAAEC,YAAY;QAAEC;MAAW,CAAC,EAAE;QAC5FI,YAAY,EAAE,MAAM,CAAG;MACzB,CAAC,CAAC;MAEF,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACN,QAAQ,CAACO,IAAI,CAAC,EAAE;QAAEC,IAAI,EAAE;MAAY,CAAC,CAAC,CAAC;MACjFC,UAAU,CAACN,GAAG,CAAC;IACjB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,oBACEhB,OAAA;IAAAkB,QAAA,EACGC,OAAO,iBAAInB,OAAA;MAAKoB,GAAG,EAAED,OAAQ;MAACE,GAAG,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV,CAAC;AAACC,EAAA,GApBIzB,sBAAsB;AAsB5B,eAAeA,sBAAsB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}