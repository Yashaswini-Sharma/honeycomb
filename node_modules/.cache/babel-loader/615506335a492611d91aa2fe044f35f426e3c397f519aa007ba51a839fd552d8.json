{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycomb.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HoneycombPlotGenerator = ({\n  easy_count,\n  medium_count,\n  hard_count\n}) => {\n  _s();\n  const [plotUrl, setPlotUrl] = useState('');\n  const generatePlot = async () => {\n    try {\n      const response = await axios.post('/generate_plot', {\n        easy_count,\n        medium_count,\n        hard_count\n      }, {\n        responseType: 'blob' // Important for handling binary data\n      });\n      const url = URL.createObjectURL(new Blob([response.data], {\n        type: 'image/png'\n      }));\n      setPlotUrl(url);\n    } catch (error) {\n      console.error('Error generating plot:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: plotUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: plotUrl,\n      alt: \"Honeycomb Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(HoneycombPlotGenerator, \"nFD+pbaR4WYT802L+Y/TD9/k92E=\");\n_c = HoneycombPlotGenerator;\nexport default HoneycombPlotGenerator;\nvar _c;\n$RefreshReg$(_c, \"HoneycombPlotGenerator\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","HoneycombPlotGenerator","easy_count","medium_count","hard_count","_s","plotUrl","setPlotUrl","generatePlot","response","post","responseType","url","URL","createObjectURL","Blob","data","type","error","console","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycomb.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst HoneycombPlotGenerator = ({easy_count, medium_count, hard_count}) => {\n\n  const [plotUrl, setPlotUrl] = useState('');\n\n  const generatePlot = async () => {\n    try {\n      const response = await axios.post('/generate_plot', { easy_count, medium_count, hard_count  }, {\n        responseType: 'blob',  // Important for handling binary data\n      });\n\n      const url = URL.createObjectURL(new Blob([response.data], { type: 'image/png' }));\n      setPlotUrl(url);\n    } catch (error) {\n      console.error('Error generating plot:', error);\n    }\n  };\n\n  return (\n    <div >\n      {plotUrl && <img src={plotUrl} alt=\"Honeycomb Plot\" />}\n    </div>\n  );\n};\n\nexport default HoneycombPlotGenerator;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,sBAAsB,GAAGA,CAAC;EAACC,UAAU;EAAEC,YAAY;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAEzE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,gBAAgB,EAAE;QAAER,UAAU;QAAEC,YAAY;QAAEC;MAAY,CAAC,EAAE;QAC7FO,YAAY,EAAE,MAAM,CAAG;MACzB,CAAC,CAAC;MAEF,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACN,QAAQ,CAACO,IAAI,CAAC,EAAE;QAAEC,IAAI,EAAE;MAAY,CAAC,CAAC,CAAC;MACjFV,UAAU,CAACK,GAAG,CAAC;IACjB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,oBACElB,OAAA;IAAAoB,QAAA,EACGd,OAAO,iBAAIN,OAAA;MAAKqB,GAAG,EAAEf,OAAQ;MAACgB,GAAG,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV,CAAC;AAACrB,EAAA,CAtBIJ,sBAAsB;AAAA0B,EAAA,GAAtB1B,sBAAsB;AAwB5B,eAAeA,sBAAsB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}