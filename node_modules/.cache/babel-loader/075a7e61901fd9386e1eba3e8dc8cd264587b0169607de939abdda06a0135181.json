{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin'; // Correct import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HoneycombPlot = ({\n  easyCount,\n  mediumCount,\n  hardCount,\n  width = 800,\n  height = 600\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [...Array(easyCount).fill('easy'), ...Array(mediumCount).fill('medium'), ...Array(hardCount).fill('hard')];\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3'\n      };\n      const radius = 20;\n      const hexbinGenerator = hexbin().radius(radius).extent([[0, 0], [width, height]]);\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height).append('g').attr('transform', `translate(${width / 2}, ${height / 2})`);\n\n      // Generate hexagon grid points\n      const hexagonPoints = [];\n      const hexWidth = Math.sqrt(3) * radius;\n      const hexHeight = 2 * radius;\n      for (let x = 0; x < width; x += hexWidth * 0.75) {\n        for (let y = 0; y < height; y += hexHeight) {\n          hexagonPoints.push([x, y]);\n        }\n      }\n      const hexagons = hexbinGenerator(hexagonPoints);\n\n      // Assign colors based on question types\n      hexagons.forEach((hexagon, i) => {\n        const color = colorMap[questionTypes[i % questionTypes.length]]; // Cycle through question types\n        svg.append('path').attr('d', hexbinGenerator.hexagon()).attr('transform', `translate(${hexagon.x}, ${hexagon.y})`).attr('fill', color).attr('stroke', '#000').attr('stroke-width', '1px');\n      });\n    };\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Honeycomb Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(HoneycombPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = HoneycombPlot;\nexport default HoneycombPlot;\nvar _c;\n$RefreshReg$(_c, \"HoneycombPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","hexbin","jsxDEV","_jsxDEV","HoneycombPlot","easyCount","mediumCount","hardCount","width","height","_s","svgRef","createHoneycombPlot","totalCount","questionTypes","Array","fill","colorMap","easy","medium","hard","radius","hexbinGenerator","extent","select","current","selectAll","remove","svg","attr","append","hexagonPoints","hexWidth","Math","sqrt","hexHeight","x","y","push","hexagons","forEach","hexagon","i","color","length","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';  // Correct import\n\nconst HoneycombPlot = ({ easyCount, mediumCount, hardCount, width = 800, height = 600 }) => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [\n        ...Array(easyCount).fill('easy'),\n        ...Array(mediumCount).fill('medium'),\n        ...Array(hardCount).fill('hard'),\n      ];\n\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3',\n      };\n\n      const radius = 20;\n      const hexbinGenerator = hexbin().radius(radius).extent([[0, 0], [width, height]]);\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n\n      const svg = d3\n        .select(svgRef.current)\n        .attr('width', width)\n        .attr('height', height)\n        .append('g')\n        .attr('transform', `translate(${width / 2}, ${height / 2})`);\n\n      // Generate hexagon grid points\n      const hexagonPoints = [];\n      const hexWidth = Math.sqrt(3) * radius;\n      const hexHeight = 2 * radius;\n      for (let x = 0; x < width; x += hexWidth * 0.75) {\n        for (let y = 0; y < height; y += hexHeight) {\n          hexagonPoints.push([x, y]);\n        }\n      }\n\n      const hexagons = hexbinGenerator(hexagonPoints);\n\n      // Assign colors based on question types\n      hexagons.forEach((hexagon, i) => {\n        const color = colorMap[questionTypes[i % questionTypes.length]]; // Cycle through question types\n        svg\n          .append('path')\n          .attr('d', hexbinGenerator.hexagon())\n          .attr('transform', `translate(${hexagon.x}, ${hexagon.y})`)\n          .attr('fill', color)\n          .attr('stroke', '#000')\n          .attr('stroke-width', '1px');\n      });\n    };\n\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n\n  return (\n    <div>\n      <h1>Honeycomb Plot</h1>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default HoneycombPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}