{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HoneycombPlot = ({\n  easyCount,\n  mediumCount,\n  hardCount,\n  width = 800,\n  height = 600\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [...Array(easyCount).fill('easy'), ...Array(mediumCount).fill('medium'), ...Array(hardCount).fill('hard')];\n      d3.shuffle(questionTypes);\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3'\n      };\n      const maxRadius = 20; // Starting radius\n      const minRadius = 5; // Minimum radius for the smallest hexagon\n      const hexWidth = Math.sqrt(3) * maxRadius;\n      const hexHeight = 2 * maxRadius;\n      const directions = [[1, 0], [-0.5, 0.75], [-1, 0], [0.5, -0.75]];\n      const hexagonPoints = [];\n      const visited = new Set();\n      const startX = Math.random() * (width - hexWidth);\n      const startY = Math.random() * (height - hexHeight);\n      hexagonPoints.push([startX, startY]);\n      visited.add(`${Math.round(startX)},${Math.round(startY)}`);\n      while (hexagonPoints.length < totalCount) {\n        const randomHexagon = hexagonPoints[Math.floor(Math.random() * hexagonPoints.length)];\n        const [x, y] = randomHexagon;\n        const randomDirection = directions[Math.floor(Math.random() * directions.length)];\n        const newX = x + randomDirection[0] * hexWidth;\n        const newY = y + randomDirection[1] * hexHeight;\n        if (newX >= 0 && newX <= width - hexWidth && newY >= 0 && newY <= height - hexHeight && !visited.has(`${Math.round(newX)},${Math.round(newY)}`)) {\n          hexagonPoints.push([newX, newY]);\n          visited.add(`${Math.round(newX)},${Math.round(newY)}`);\n        }\n      }\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n      const hexbinGenerator = hexbin().radius(d => d.radius) // Dynamically set radius\n      .x(d => d.x).y(d => d.y);\n      hexagonPoints.forEach((pos, i) => {\n        const radius = Math.max(minRadius, maxRadius - i / totalCount * (maxRadius - minRadius));\n        const color = colorMap[questionTypes[i % questionTypes.length]];\n        svg.append('path').attr('d', hexbinGenerator.hexagon()).attr('transform', `translate(${pos[0]}, ${pos[1]})`).attr('fill', color).attr('stroke', '#000').attr('stroke-width', '1px').datum({\n          x: pos[0],\n          y: pos[1],\n          radius\n        });\n      });\n    };\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(HoneycombPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = HoneycombPlot;\nexport default HoneycombPlot;\nvar _c;\n$RefreshReg$(_c, \"HoneycombPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","hexbin","jsxDEV","_jsxDEV","HoneycombPlot","easyCount","mediumCount","hardCount","width","height","_s","svgRef","createHoneycombPlot","totalCount","questionTypes","Array","fill","shuffle","colorMap","easy","medium","hard","maxRadius","minRadius","hexWidth","Math","sqrt","hexHeight","directions","hexagonPoints","visited","Set","startX","random","startY","push","add","round","length","randomHexagon","floor","x","y","randomDirection","newX","newY","has","select","current","selectAll","remove","svg","attr","hexbinGenerator","radius","d","forEach","pos","i","max","color","append","hexagon","datum","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';\n\nconst HoneycombPlot = ({ easyCount, mediumCount, hardCount, width = 800, height = 600 }) => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [\n        ...Array(easyCount).fill('easy'),\n        ...Array(mediumCount).fill('medium'),\n        ...Array(hardCount).fill('hard'),\n      ];\n\n      d3.shuffle(questionTypes);\n\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3',\n      };\n\n      const maxRadius = 20; // Starting radius\n      const minRadius = 5;  // Minimum radius for the smallest hexagon\n      const hexWidth = Math.sqrt(3) * maxRadius;\n      const hexHeight = 2 * maxRadius;\n\n      const directions = [\n        [1, 0],    \n        [-0.5, 0.75],   \n        [-1, 0],  \n        [0.5, -0.75]    \n      ];\n\n      const hexagonPoints = [];\n      const visited = new Set();\n      const startX = Math.random() * (width - hexWidth);\n      const startY = Math.random() * (height - hexHeight);\n      \n      hexagonPoints.push([startX, startY]);\n      visited.add(`${Math.round(startX)},${Math.round(startY)}`);\n\n      while (hexagonPoints.length < totalCount) {\n        const randomHexagon = hexagonPoints[Math.floor(Math.random() * hexagonPoints.length)];\n        const [x, y] = randomHexagon;\n        const randomDirection = directions[Math.floor(Math.random() * directions.length)];\n        const newX = x + randomDirection[0] * hexWidth;\n        const newY = y + randomDirection[1] * hexHeight;\n\n        if (newX >= 0 && newX <= width - hexWidth &&\n            newY >= 0 && newY <= height - hexHeight &&\n            !visited.has(`${Math.round(newX)},${Math.round(newY)}`)) {\n          hexagonPoints.push([newX, newY]);\n          visited.add(`${Math.round(newX)},${Math.round(newY)}`);\n        }\n      }\n\n      d3.select(svgRef.current).selectAll('*').remove();\n\n      const svg = d3\n        .select(svgRef.current)\n        .attr('width', width)\n        .attr('height', height);\n\n      const hexbinGenerator = hexbin()\n        .radius(d => d.radius) // Dynamically set radius\n        .x(d => d.x)\n        .y(d => d.y);\n\n      hexagonPoints.forEach((pos, i) => {\n        const radius = Math.max(minRadius, maxRadius - (i / totalCount) * (maxRadius - minRadius));\n        const color = colorMap[questionTypes[i % questionTypes.length]];\n\n        svg\n          .append('path')\n          .attr('d', hexbinGenerator.hexagon())\n          .attr('transform', `translate(${pos[0]}, ${pos[1]})`)\n          .attr('fill', color)\n          .attr('stroke', '#000')\n          .attr('stroke-width', '1px')\n          .datum({ x: pos[0], y: pos[1], radius });\n      });\n    };\n\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n\n  return (\n    <div>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default HoneycombPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}