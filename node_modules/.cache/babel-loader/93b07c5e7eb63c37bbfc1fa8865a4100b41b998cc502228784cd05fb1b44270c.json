{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin'; // Correct import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HoneycombPlot = ({\n  easyCount,\n  mediumCount,\n  hardCount,\n  width = 800,\n  height = 600\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [...Array(easyCount).fill('easy'), ...Array(mediumCount).fill('medium'), ...Array(hardCount).fill('hard')];\n\n      // Shuffle the questionTypes array to randomize hexagon placement\n      d3.shuffle(questionTypes);\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3'\n      };\n      const radius = 20;\n      const hexWidth = Math.sqrt(3) * radius;\n      const hexHeight = 2 * radius;\n\n      // Generate random hexagon positions\n      const hexagonPoints = [];\n      while (hexagonPoints.length < totalCount) {\n        const x = Math.random() * (width - hexWidth);\n        const y = Math.random() * (height - hexHeight);\n        const pos = [x, y];\n\n        // Check for overlap\n        const overlapping = hexagonPoints.some(([hx, hy]) => {\n          const distance = Math.sqrt((x - hx) ** 2 + (y - hy) ** 2);\n          return distance < hexWidth * 0.75; // Adjust for hexagon overlap\n        });\n        if (!overlapping) {\n          hexagonPoints.push(pos);\n        }\n      }\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n      // Draw hexagons\n      hexagonPoints.forEach((pos, i) => {\n        const color = colorMap[questionTypes[i % questionTypes.length]];\n        svg.append('path').attr('d', hexbin().radius(radius).hexagon()).attr('transform', `translate(${pos[0] + radius}, ${pos[1] + radius})`).attr('fill', color).attr('stroke', '#000').attr('stroke-width', '1px');\n      });\n    };\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Honeycomb Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(HoneycombPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = HoneycombPlot;\nexport default HoneycombPlot;\nvar _c;\n$RefreshReg$(_c, \"HoneycombPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","hexbin","jsxDEV","_jsxDEV","HoneycombPlot","easyCount","mediumCount","hardCount","width","height","_s","svgRef","createHoneycombPlot","totalCount","questionTypes","Array","fill","shuffle","colorMap","easy","medium","hard","radius","hexWidth","Math","sqrt","hexHeight","hexagonPoints","length","x","random","y","pos","overlapping","some","hx","hy","distance","push","select","current","selectAll","remove","svg","attr","forEach","i","color","append","hexagon","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';  // Correct import\n\nconst HoneycombPlot = ({ easyCount, mediumCount, hardCount, width = 800, height = 600 }) => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [\n        ...Array(easyCount).fill('easy'),\n        ...Array(mediumCount).fill('medium'),\n        ...Array(hardCount).fill('hard'),\n      ];\n\n      // Shuffle the questionTypes array to randomize hexagon placement\n      d3.shuffle(questionTypes);\n\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3',\n      };\n\n      const radius = 20;\n      const hexWidth = Math.sqrt(3) * radius;\n      const hexHeight = 2 * radius;\n      \n      // Generate random hexagon positions\n      const hexagonPoints = [];\n      while (hexagonPoints.length < totalCount) {\n        const x = Math.random() * (width - hexWidth);\n        const y = Math.random() * (height - hexHeight);\n        const pos = [x, y];\n\n        // Check for overlap\n        const overlapping = hexagonPoints.some(([hx, hy]) => {\n          const distance = Math.sqrt((x - hx) ** 2 + (y - hy) ** 2);\n          return distance < hexWidth * 0.75; // Adjust for hexagon overlap\n        });\n\n        if (!overlapping) {\n          hexagonPoints.push(pos);\n        }\n      }\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n\n      const svg = d3\n        .select(svgRef.current)\n        .attr('width', width)\n        .attr('height', height);\n\n      // Draw hexagons\n      hexagonPoints.forEach((pos, i) => {\n        const color = colorMap[questionTypes[i % questionTypes.length]];\n\n        svg\n          .append('path')\n          .attr('d', hexbin().radius(radius).hexagon())\n          .attr('transform', `translate(${pos[0] + radius}, ${pos[1] + radius})`)\n          .attr('fill', color)\n          .attr('stroke', '#000')\n          .attr('stroke-width', '1px');\n      });\n    };\n\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n\n  return (\n    <div>\n      <h1>Honeycomb Plot</h1>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default HoneycombPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}