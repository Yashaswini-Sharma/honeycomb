{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HoneycombPlot = ({\n  easyCount,\n  mediumCount,\n  hardCount,\n  width = 800,\n  height = 600\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [...Array(easyCount).fill('easy'), ...Array(mediumCount).fill('medium'), ...Array(hardCount).fill('hard')];\n\n      // Shuffle the questionTypes array to randomize hexagon colors\n      d3.shuffle(questionTypes);\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3'\n      };\n      const radius = 20;\n      const hexWidth = Math.sqrt(3) * radius;\n      const hexHeight = 2 * radius;\n\n      // Directions for hexagon adjacency\n      const directions = [[1, 0],\n      // Right\n      [-0.5, 1],\n      // Up-Right\n      [-1, 0],\n      // Left\n      [0.5, -0.5] // Down-Right\n      ];\n      const hexagonPoints = [];\n      const visited = new Set();\n      const startX = Math.random() * (width - hexWidth);\n      const startY = Math.random() * (height - hexHeight);\n\n      // Start with a random initial point\n      hexagonPoints.push([startX, startY]);\n      visited.add(`${Math.round(startX)},${Math.round(startY)}`);\n      while (hexagonPoints.length < totalCount) {\n        const randomHexagon = hexagonPoints[Math.floor(Math.random() * hexagonPoints.length)];\n        const [x, y] = randomHexagon;\n        const randomDirection = directions[Math.floor(Math.random() * directions.length)];\n        const newX = x + randomDirection[0] * hexWidth;\n        const newY = y + randomDirection[1] * hexHeight;\n\n        // Check if the new hexagon is within bounds and not overlapping\n        if (newX >= 0 && newX <= width - hexWidth && newY >= 0 && newY <= height - hexHeight && !visited.has(`${Math.round(newX)},${Math.round(newY)}`)) {\n          hexagonPoints.push([newX, newY]);\n          visited.add(`${Math.round(newX)},${Math.round(newY)}`);\n        }\n      }\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n      const hexbinGenerator = hexbin().radius(radius).x(d => d[0]).y(d => d[1]);\n\n      // Draw hexagons\n      hexagonPoints.forEach((pos, i) => {\n        const color = colorMap[questionTypes[i % questionTypes.length]];\n        svg.append('path').attr('d', hexbinGenerator.hexagon()).attr('transform', `translate(${pos[0] + radius}, ${pos[1] + radius})`).attr('fill', color).attr('stroke', '#000').attr('stroke-width', '1px');\n      });\n    };\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Honeycomb Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(HoneycombPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = HoneycombPlot;\nexport default HoneycombPlot;\nvar _c;\n$RefreshReg$(_c, \"HoneycombPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","hexbin","jsxDEV","_jsxDEV","HoneycombPlot","easyCount","mediumCount","hardCount","width","height","_s","svgRef","createHoneycombPlot","totalCount","questionTypes","Array","fill","shuffle","colorMap","easy","medium","hard","radius","hexWidth","Math","sqrt","hexHeight","directions","hexagonPoints","visited","Set","startX","random","startY","push","add","round","length","randomHexagon","floor","x","y","randomDirection","newX","newY","has","select","current","selectAll","remove","svg","attr","hexbinGenerator","d","forEach","pos","i","color","append","hexagon","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';\n\nconst HoneycombPlot = ({ easyCount, mediumCount, hardCount, width = 800, height = 600 }) => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [\n        ...Array(easyCount).fill('easy'),\n        ...Array(mediumCount).fill('medium'),\n        ...Array(hardCount).fill('hard'),\n      ];\n\n      // Shuffle the questionTypes array to randomize hexagon colors\n      d3.shuffle(questionTypes);\n\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3',\n      };\n\n      const radius = 20; \n      const hexWidth = Math.sqrt(3) * radius;\n      const hexHeight = 2 * radius;\n\n      // Directions for hexagon adjacency\n      const directions = [\n        [1, 0],    // Right\n        [-0.5, 1],   // Up-Right\n        [-1, 0],   // Left\n        [0.5, -0.5]    // Down-Right\n      ];\n\n      const hexagonPoints = [];\n      const visited = new Set();\n      const startX = Math.random() * (width - hexWidth);\n      const startY = Math.random() * (height - hexHeight);\n      \n      // Start with a random initial point\n      hexagonPoints.push([startX, startY]);\n      visited.add(`${Math.round(startX)},${Math.round(startY)}`);\n\n      while (hexagonPoints.length < totalCount) {\n        const randomHexagon = hexagonPoints[Math.floor(Math.random() * hexagonPoints.length)];\n        const [x, y] = randomHexagon;\n        const randomDirection = directions[Math.floor(Math.random() * directions.length)];\n        const newX = x + randomDirection[0] * hexWidth;\n        const newY = y + randomDirection[1] * hexHeight;\n\n        // Check if the new hexagon is within bounds and not overlapping\n        if (newX >= 0 && newX <= width - hexWidth &&\n            newY >= 0 && newY <= height - hexHeight &&\n            !visited.has(`${Math.round(newX)},${Math.round(newY)}`)) {\n          hexagonPoints.push([newX, newY]);\n          visited.add(`${Math.round(newX)},${Math.round(newY)}`);\n        }\n      }\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n\n      const svg = d3\n        .select(svgRef.current)\n        .attr('width', width)\n        .attr('height', height);\n\n      const hexbinGenerator = hexbin()\n        .radius(radius)\n        .x(d => d[0])\n        .y(d => d[1]);\n\n      // Draw hexagons\n      hexagonPoints.forEach((pos, i) => {\n        const color = colorMap[questionTypes[i % questionTypes.length]];\n\n        svg\n          .append('path')\n          .attr('d', hexbinGenerator.hexagon())\n          .attr('transform', `translate(${pos[0] + radius}, ${pos[1] + radius})`)\n          .attr('fill', color)\n          .attr('stroke', '#000')\n          .attr('stroke-width', '1px');\n      });\n    };\n\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n\n  return (\n    <div>\n      <h1>Honeycomb Plot</h1>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default HoneycombPlot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}