{"ast":null,"code":"var _jsxFileName = \"/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport hexbin from 'd3-hexbin'; // Import d3-hexbin\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HoneycombPlot = ({\n  easyCount,\n  mediumCount,\n  hardCount,\n  width = 800,\n  height = 600\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [...Array(easyCount).fill('easy'), ...Array(mediumCount).fill('medium'), ...Array(hardCount).fill('hard')];\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3'\n      };\n      const radius = 20;\n      const hexbinGenerator = hexbin().radius(radius);\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height).append('g').attr('transform', `translate(${width / 2}, ${height / 2})`);\n      const points = d3.range(totalCount).map(d => {\n        const angle = Math.PI / 3 * (d % 6);\n        const r = radius * Math.sqrt(3 * (d % 6));\n        return [Math.cos(angle) * r, Math.sin(angle) * r];\n      });\n      const hexagons = hexbinGenerator(points);\n      hexagons.forEach((d, i) => {\n        svg.append('path').attr('d', hexbinGenerator.hexagon()).attr('transform', `translate(${d.x}, ${d.y})`).attr('fill', colorMap[questionTypes[i]]).attr('stroke', '#000').attr('stroke-width', '1px');\n      });\n    };\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Honeycomb Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(HoneycombPlot, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = HoneycombPlot;\nexport default HoneycombPlot;\nvar _c;\n$RefreshReg$(_c, \"HoneycombPlot\");","map":{"version":3,"names":["React","useEffect","useRef","d3","hexbin","jsxDEV","_jsxDEV","HoneycombPlot","easyCount","mediumCount","hardCount","width","height","_s","svgRef","createHoneycombPlot","totalCount","questionTypes","Array","fill","colorMap","easy","medium","hard","radius","hexbinGenerator","select","current","selectAll","remove","svg","attr","append","points","range","map","d","angle","Math","PI","r","sqrt","cos","sin","hexagons","forEach","i","hexagon","x","y","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/naina/WebDev/honeycomb-questions/src/honeycombPlot.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport hexbin from 'd3-hexbin';  // Import d3-hexbin\n\nconst HoneycombPlot = ({ easyCount, mediumCount, hardCount, width = 800, height = 600 }) => {\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const createHoneycombPlot = () => {\n      const totalCount = easyCount + mediumCount + hardCount;\n      const questionTypes = [\n        ...Array(easyCount).fill('easy'),\n        ...Array(mediumCount).fill('medium'),\n        ...Array(hardCount).fill('hard'),\n      ];\n\n      const colorMap = {\n        easy: '#F9A500',\n        medium: '#CD8DFF',\n        hard: '#13A4E3',\n      };\n\n      const radius = 20;\n      const hexbinGenerator = hexbin().radius(radius);\n\n      // Remove previous svg contents if any\n      d3.select(svgRef.current).selectAll('*').remove();\n\n      const svg = d3\n        .select(svgRef.current)\n        .attr('width', width)\n        .attr('height', height)\n        .append('g')\n        .attr('transform', `translate(${width / 2}, ${height / 2})`);\n\n      const points = d3.range(totalCount).map((d) => {\n        const angle = (Math.PI / 3) * (d % 6);\n        const r = radius * Math.sqrt(3 * (d % 6));\n        return [\n          Math.cos(angle) * r,\n          Math.sin(angle) * r,\n        ];\n      });\n\n      const hexagons = hexbinGenerator(points);\n\n      hexagons.forEach((d, i) => {\n        svg\n          .append('path')\n          .attr('d', hexbinGenerator.hexagon())\n          .attr('transform', `translate(${d.x}, ${d.y})`)\n          .attr('fill', colorMap[questionTypes[i]])\n          .attr('stroke', '#000')\n          .attr('stroke-width', '1px');\n      });\n    };\n\n    createHoneycombPlot();\n  }, [easyCount, mediumCount, hardCount, width, height]);\n\n  return (\n    <div>\n      <h1>Honeycomb Plot</h1>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default HoneycombPlot;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAOC,MAAM,MAAM,WAAW,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,SAAS;EAAEC,WAAW;EAAEC,SAAS;EAAEC,KAAK,GAAG,GAAG;EAAEC,MAAM,GAAG;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC1F,MAAMC,MAAM,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACd,MAAMc,mBAAmB,GAAGA,CAAA,KAAM;MAChC,MAAMC,UAAU,GAAGR,SAAS,GAAGC,WAAW,GAAGC,SAAS;MACtD,MAAMO,aAAa,GAAG,CACpB,GAAGC,KAAK,CAACV,SAAS,CAAC,CAACW,IAAI,CAAC,MAAM,CAAC,EAChC,GAAGD,KAAK,CAACT,WAAW,CAAC,CAACU,IAAI,CAAC,QAAQ,CAAC,EACpC,GAAGD,KAAK,CAACR,SAAS,CAAC,CAACS,IAAI,CAAC,MAAM,CAAC,CACjC;MAED,MAAMC,QAAQ,GAAG;QACfC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,SAAS;QACjBC,IAAI,EAAE;MACR,CAAC;MAED,MAAMC,MAAM,GAAG,EAAE;MACjB,MAAMC,eAAe,GAAGrB,MAAM,CAAC,CAAC,CAACoB,MAAM,CAACA,MAAM,CAAC;;MAE/C;MACArB,EAAE,CAACuB,MAAM,CAACZ,MAAM,CAACa,OAAO,CAAC,CAACC,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;MAEjD,MAAMC,GAAG,GAAG3B,EAAE,CACXuB,MAAM,CAACZ,MAAM,CAACa,OAAO,CAAC,CACtBI,IAAI,CAAC,OAAO,EAAEpB,KAAK,CAAC,CACpBoB,IAAI,CAAC,QAAQ,EAAEnB,MAAM,CAAC,CACtBoB,MAAM,CAAC,GAAG,CAAC,CACXD,IAAI,CAAC,WAAW,EAAE,aAAapB,KAAK,GAAG,CAAC,KAAKC,MAAM,GAAG,CAAC,GAAG,CAAC;MAE9D,MAAMqB,MAAM,GAAG9B,EAAE,CAAC+B,KAAK,CAAClB,UAAU,CAAC,CAACmB,GAAG,CAAEC,CAAC,IAAK;QAC7C,MAAMC,KAAK,GAAIC,IAAI,CAACC,EAAE,GAAG,CAAC,IAAKH,CAAC,GAAG,CAAC,CAAC;QACrC,MAAMI,CAAC,GAAGhB,MAAM,GAAGc,IAAI,CAACG,IAAI,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;QACzC,OAAO,CACLE,IAAI,CAACI,GAAG,CAACL,KAAK,CAAC,GAAGG,CAAC,EACnBF,IAAI,CAACK,GAAG,CAACN,KAAK,CAAC,GAAGG,CAAC,CACpB;MACH,CAAC,CAAC;MAEF,MAAMI,QAAQ,GAAGnB,eAAe,CAACQ,MAAM,CAAC;MAExCW,QAAQ,CAACC,OAAO,CAAC,CAACT,CAAC,EAAEU,CAAC,KAAK;QACzBhB,GAAG,CACAE,MAAM,CAAC,MAAM,CAAC,CACdD,IAAI,CAAC,GAAG,EAAEN,eAAe,CAACsB,OAAO,CAAC,CAAC,CAAC,CACpChB,IAAI,CAAC,WAAW,EAAE,aAAaK,CAAC,CAACY,CAAC,KAAKZ,CAAC,CAACa,CAAC,GAAG,CAAC,CAC9ClB,IAAI,CAAC,MAAM,EAAEX,QAAQ,CAACH,aAAa,CAAC6B,CAAC,CAAC,CAAC,CAAC,CACxCf,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC;MAChC,CAAC,CAAC;IACJ,CAAC;IAEDhB,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACP,SAAS,EAAEC,WAAW,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,CAAC,CAAC;EAEtD,oBACEN,OAAA;IAAA4C,QAAA,gBACE5C,OAAA;MAAA4C,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBhD,OAAA;MAAKiD,GAAG,EAAEzC;IAAO;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV,CAAC;AAACzC,EAAA,CA9DIN,aAAa;AAAAiD,EAAA,GAAbjD,aAAa;AAgEnB,eAAeA,aAAa;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}